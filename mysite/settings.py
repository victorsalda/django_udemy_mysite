
# This file set Django settings for mysite projects. A settings file is just a Python module with module-level variables.

# Because a settings file is a Python module, the following apply:

    # It doesnâ€™t allow for Python syntax errors.

    # It can assign settings dynamically using normal Python syntax.

    # It can import values from other settings files.

# Generated by 'django-admin startproject' using Django 1.8.6.

# For more information on this file, see https://docs.djangoproject.com/en/1.8/topics/settings/

# For the full list of settings and their values, see https://docs.djangoproject.com/en/1.8/ref/settings/

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ea!@yey8cd&^t6b0n5l*mzv4w)l0jb)d1+2azm_l%8_xxg2^t9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin', # framework for the administration of the project.
    'django.contrib.auth', # framework for authentication.
    'django.contrib.contenttypes', # framework for contenttypes.
    'django.contrib.sessions', # framework for sessions.
    'django.contrib.messages', # framework form messages.
    'django.contrib.staticfiles', # framework for statics files.
    'blog',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'
                                                # Python currently boasts a wide variety of web application frameworks,
                                                # such as Zope, Quixote, Webware, SkunkWeb, PSO, and Twisted Web -- to name
                                                # just a few [1]. This wide variety of choices can be a problem for new Python
                                                # users, because generally speaking, their choice of web framework will limit
                                                # their choice of usable web servers, and vice versa.

                                                # Web Server Gateway Interface (WSGI) is a specification for
                                                # simple and universal interface between web servers and web
                                                # applications or frameworks for the Python programming language.
                                                # WSGI was created as a low-level interface between web servers
                                                # and web applications or frameworks to promote common ground for
                                                # portable web application development.
                                                # The WSGI has two sides: the "server" or "gateway" side (often a
                                                # web server such as Apache or Nginx), and the "application" or
                                                # "framework" side (the Python script itself).

                                                # The server where you are going to run your web apps have to be WSGI compatble.



## Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# cd /Users/victorsalda/PycharmProjects/django_training/mysite
# source ./env/bin/activate
# export PATH=$PATH:/usr/local/mysql/bin
# pip install mysqlclient
# deactivate activate


DATABASES = { # Dictionary with all the data bases for the project.

              # Django needs to store all it does (users, tables, apps, etc.) in a data base.
              # Django support: PostgreSQL, MySQL, SQLite and Oracle.

              # There are three MySQL libraries (clients in servers world) for Python that are currently maintained:
              # 1. mysqlclient - By far the fastest MySQL connector for CPython. Requires the mysql-connector-c C library to work.
              # 2. PyMySQL - Pure Python MySQL client. According to the maintainer of both mysqlclient and MyPySQL, you should use PyMySQL if:
                    # You can't use libmysqlclient for some reason.
                    # You want to use monkeypatched socket of gevent or eventlet.
                    # You wan't to hack mysql protocol.
              # 3. mysql-connector-python - MySQL connector developed by the MySQL group at Oracle, also written entirely in Python.
                    # It's performance appears to be the worst out of the three. Also, due to some licensing issues, you can't download it from PyPI (but it's now available through conda).

    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'victor_django_mysite',
        'USER': 'root',
        'PASSWORD': '9PAv32ekC4ioziyg',
        'HOST': '35.187.28.136',
        'PORT': '3306',
        'OPTIONS': {'charset': 'utf8mb4'},
    },
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'


# configuration of the SMTP server to send email. In this case using the google one.

EMAIL_HOST = 'smtp.gmail.com'

EMAIL_HOST_USER = 'victor@verticaldataanalytics.com'

EMAIL_HOST_PASSWORD = 'vicsal20'

EMAIL_PORT = 587

EMAIL_USE_TLS = True
